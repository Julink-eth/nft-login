{"version":3,"sources":["AppContext.js","theme.js","components/styled/Text.js","pages/Home/index.js","hooks/services.js","components/styled/Card.js","static/metamask-logo.svg","connectors.js","components/styled/Button.js","components/MetamaskConnectButton.js","utils/utils.js","components/Header.js","components/styled/NotificationStyled.js","components/GlobalError.js","App.js","serviceWorker.js","index.js"],"names":["initialContext","contentError","undefined","setContentError","isAuthorized","setIsAuthorized","apiLoading","setApiLoading","appReducer","state","type","payload","AppContext","createContext","useAppContext","React","useContext","AppContextProvider","children","useReducer","store","dispatch","contextValue","str","authorized","loading","Provider","value","colors","purple","brown","red","lightRed","lightBlue","darkBlue","gray","lightGray","green","lightGreen","textSizes","t0","t1","t2","t3","t4","t5","t6","theme","Text","styled","span","p","fontFamily","underline","capitalize","uppercase","pointer","center","right","left","italic","bold","fontWeight","display","block","inline","color","black","ellipsis","lineHeight","opacity","Home","useWeb3React","active","account","initAuthorization","userAddr","a","nftContractToCheck","nftIdToCheck","fetch","result","json","ownedNfts","forEach","nft","contract","address","id","tokenId","useApi","useEffect","mounted","style","rowGap","flexDirection","textAlign","Card","div","expandable","injected","InjectedConnector","supportedChainIds","ButtonCommon","button","ButtonAction","ButtonAlert","MetamaskLogo","img","attrs","src","MMLogo","pageState","MetamaskConnectButton","activate","deactivate","useState","status","setStatus","tryActivate","alignItems","gap","onClick","className","num","substring","length","shortenAddress","window","ethereum","e","UnsupportedChainIdError","Header","justifyContent","GlobalErrorStyled","GlobalError","setTimeout","fluid","getLibrary","provider","ethers","providers","Web3Provider","App","on","location","reload","margin","maxWidth","width","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a0188ea0.chunk.js","sourcesContent":["import React, { createContext, useReducer } from \"react\";\nconst initialContext = {\n    contentError: undefined,\n    setContentError: () => {},\n    isAuthorized: false,\n    setIsAuthorized: () => {},\n    apiLoading: false,\n    setApiLoading: () => {},\n};\n\nconst appReducer = (state, { type, payload }) => {\n    switch (type) {\n        case \"SET_CONTENT_ERROR\":\n            return {\n                ...state,\n                contentError: payload,\n            };\n        case \"SET_IS_AUTHORIZED\":\n            return {\n                ...state,\n                isAuthorized: payload,\n            };\n        case \"SET_API_LOADING\":\n            return {\n                ...state,\n                apiLoading: payload,\n            };\n        default:\n            return state;\n    }\n};\n\nconst AppContext = createContext(initialContext);\nexport const useAppContext = () => React.useContext(AppContext);\nexport const AppContextProvider = ({ children }) => {\n    const [store, dispatch] = useReducer(appReducer, initialContext);\n\n    const contextValue = {\n        contentError: store.contentError,\n        setContentError: (str) => {\n            dispatch({ type: \"SET_CONTENT_ERROR\", payload: str });\n        },\n        isAuthorized: store.isAuthorized,\n        setIsAuthorized: (authorized) => {\n            dispatch({ type: \"SET_IS_AUTHORIZED\", payload: authorized });\n        },\n        apiLoading: store.apiLoading,\n        setApiLoading: (loading) => {\n            dispatch({ type: \"SET_API_LOADING\", payload: loading });\n        },\n    };\n\n    return (\n        <AppContext.Provider value={contextValue}>\n            {children}\n        </AppContext.Provider>\n    );\n};\n","export const colors = {\n    purple: \"#bf00ff\",\n    brown: \"#c9b18aff\",\n    red: \"#d13328\",\n    lightRed: \"#c76861\",\n    lightBlue: \"#347e8aff\",\n    darkBlue: \"#29576eff\",\n    gray: \"#5b778fff\",\n    lightGray: \"#F3F5F7\",\n    green: \"#7DDE92\",\n    lightGreen: \"#b2d9ba\",\n};\n\nexport const textSizes = {\n    t0: \"48px\",\n    t1: \"36px\",\n    t2: \"26px\",\n    t3: \"22px\",\n    t4: \"18px\",\n    t5: \"16px\",\n    t6: \"14px\",\n};\n\nconst theme = {\n    ...colors,\n    textSizes,\n};\n\nexport default theme;\n","import styled from \"styled-components\";\nimport theme, { textSizes } from \"../../theme\";\n\nconst getColor = (p) => {\n    // @ts-ignore\n    if (theme[p.color]) return theme[p.color];\n    if (p.color) return p.color;\n    return theme.black;\n};\nconst getAlignment = (p) => {\n    if (p.center) return \"center\";\n    if (p.right) return \"right\";\n    if (p.left) return \"left\";\n    return \"inherit\";\n};\nconst getDisplay = (p) => {\n    if (p.display) return p.display;\n    if (p.block) return \"block\";\n    if (p.inline) return \"inline\";\n    return \"initial\";\n};\nconst getWeight = (p) => {\n    if (p.bold) return 700;\n    if (p.fontWeight) return p.fontWeight;\n    return \"inherit\";\n};\nconst getLineHeight = (p) => {\n    if (p.lineHeight) return p.lineHeight;\n    return \"inherit\";\n};\nconst getSize = (p) => {\n    if (p.t0) return textSizes.t0;\n    if (p.t1) return textSizes.t1;\n    if (p.t2) return textSizes.t2;\n    if (p.t3) return textSizes.t3;\n    if (p.t4) return textSizes.t4;\n    if (p.t5) return textSizes.t5;\n    if (p.t6) return textSizes.t6;\n\n    return \"inherit\";\n};\nconst getTransform = (p) => {\n    if (p.capitalize) return \"capitalize\";\n    if (p.uppercase) return \"uppercase\";\n    return \"\";\n};\n\nconst Text = styled.span`\n    font-family: ${(p) => p.fontFamily || \"Inter custom,sans-serif\"};\n    text-decoration: ${(p) => (p.underline ? \"underline\" : \"\")};\n    text-transform: ${getTransform};\n    cursor: ${(p) => (p.pointer ? \"pointer\" : \"\")};\n    text-align: ${getAlignment};\n    font-style: ${(p) => (p.italic ? \"italic\" : \"\")};\n    font-size: ${getSize};\n    font-weight: ${getWeight};\n    display: ${getDisplay};\n    color: ${getColor};\n    overflow: ${(p) => (p.ellipsis ? \"hidden\" : \"inherit\")};\n    text-overflow: ${(p) => (p.ellipsis ? \"ellipsis\" : \"inherit\")};\n    white-space: ${(p) => (p.ellipsis ? \"nowrap\" : \"\")};\n    line-height: ${getLineHeight};\n    opacity: ${(p) => p.opacity || 1};\n`;\n\nexport default Text;\n","import React, { useEffect } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { useApi } from \"../../hooks/services\";\nimport { useAppContext } from \"../../AppContext\";\nimport Text from \"../../components/styled/Text\";\n\nconst Home = () => {\n    const { active, account } = useWeb3React();\n    const { initAuthorization } = useApi();\n    const { isAuthorized, apiLoading } = useAppContext();\n\n    useEffect(() => {\n        let mounted = true;\n        mounted && initAuthorization(account);\n        return () => {\n            mounted = false;\n        };\n    }, [account]);\n\n    return (\n        <div\n            style={{\n                display: \"flex\",\n                rowGap: 30,\n                flexDirection: \"column\",\n                textAlign: \"center\",\n            }}\n        >\n            {apiLoading && <Text>Loading...</Text>}\n\n            {!apiLoading && isAuthorized && (\n                <Text>\n                    Congrats! you've logged in to this page using an NFT\n                </Text>\n            )}\n            {!apiLoading && active && !isAuthorized && (\n                <Text>\n                    You need NFT with contract\n                    0x38240fa8521e0afc9e8d4c5e35acad1e8a57519c and id\n                    0x0000000000000000000000000000000000000000000000000000000000000002\n                    to be able to login\n                </Text>\n            )}\n        </div>\n    );\n};\n\nexport default Home;\n","import { useAppContext } from \"../AppContext\";\n\nexport const useApi = () => {\n    const { setIsAuthorized, setApiLoading } = useAppContext();\n\n    const initAuthorization = async (userAddr) => {\n        let authorized = false;\n        if (userAddr && userAddr !== null) {\n            setApiLoading(true);\n            const nftContractToCheck =\n                \"0x38240fa8521e0afc9e8d4c5e35acad1e8a57519c\";\n            const nftIdToCheck =\n                \"0x0000000000000000000000000000000000000000000000000000000000000002\";\n            try {\n                const result = await fetch(\n                    \"https://eth-rinkeby.alchemyapi.io/v2/demo/getNFTs/?owner=\" +\n                        userAddr\n                );\n                const json = await result.json();\n\n                json.ownedNfts.forEach((nft) => {\n                    if (\n                        nft.contract.address === nftContractToCheck &&\n                        nft.id.tokenId === nftIdToCheck\n                    ) {\n                        authorized = true;\n                    }\n                });\n            } catch (err) {}\n\n            setApiLoading(false);\n        }\n        setIsAuthorized(authorized);\n    };\n\n    return {\n        initAuthorization,\n    };\n};\n","import styled from \"styled-components\";\nimport { colors } from \"../../theme\";\n\nconst Card = styled.div`\n    background-color: ${colors.lightGray};\n    width: 100%;\n    box-shadow: rgb(0 0 0 / 1%) 0px 0px 1px, rgb(0 0 0 / 4%) 0px 4px 8px,\n        rgb(0 0 0 / 4%) 0px 16px 24px, rgb(0 0 0 / 1%) 0px 24px 32px;\n\n    border-color: ${colors.lightBlue};\n    padding: 20px;\n    box-sizing: border-box;\n`;\n\nexport const CardHeader = styled.div`\n    background-color: ${colors.lightGray};\n    width: 100%;\n    border-color: ${colors.lightBlue};\n    padding: 20px;\n    box-sizing: border-box;\n    justify-content: space-between;\n    flex-direction: row;\n    display: flex;\n    cursor: ${({ expandable }) => (expandable ? \"pointer\" : \"initial\")};\n`;\n\nexport default Card;\n","export default __webpack_public_path__ + \"static/media/metamask-logo.3c6afa61.svg\";","import { InjectedConnector } from \"@web3-react/injected-connector\";\n\nexport const injected = new InjectedConnector({\n    supportedChainIds: [4],\n});\n","import styled from \"styled-components\";\nimport { colors, textSizes } from \"../../theme\";\n\nexport const ButtonCommon = styled.button`\n    background-color: ${colors.darkBlue};\n    color: ${colors.lightGray};\n    padding: 10px;\n    border-radius: 10px;\n    border-style: none;\n    cursor: pointer;\n    font-family: Inter custom, sans-serif;\n    font-size: ${textSizes.t5};\n    &:hover {\n        background-color: ${colors.lightBlue};\n    }\n\n    &:disabled {\n        background-color: ${colors.lightBlue};\n        cursor: unset;\n    }\n`;\n\nexport const ButtonAction = styled(ButtonCommon)`\n    background-color: ${colors.green};\n    &:hover {\n        background-color: ${colors.lightGreen};\n    }\n\n    &:disabled {\n        background-color: ${colors.lightGreen};\n    }\n`;\n\nexport const ButtonAlert = styled(ButtonCommon)`\n    background-color: ${colors.red};\n    &:hover {\n        background-color: ${colors.lightRed};\n    }\n\n    &:disabled {\n        background-color: ${colors.lightRed};\n    }\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useWeb3React, UnsupportedChainIdError } from \"@web3-react/core\";\nimport MMLogo from \"../static/metamask-logo.svg\";\nimport Text from \"./styled/Text\";\nimport { injected } from \"../connectors\";\nimport { shortenAddress } from \"../utils/utils\";\nimport { ButtonAction, ButtonAlert } from \"./styled/Button\";\nimport { useAppContext } from \"../AppContext\";\n\nconst MetamaskLogo = styled.img.attrs({\n    src: MMLogo,\n})`\n    height: 40px;\n`;\n\nconst pageState = {\n    LOADING: \"LOADING\",\n    READY: \"READY\",\n};\n\nconst MetamaskConnectButton = () => {\n    const { setContentError } = useAppContext();\n    const { activate, active, account, deactivate } = useWeb3React();\n    const [status, setStatus] = useState(pageState.LOADING);\n\n    useEffect(() => {\n        let mounted = true;\n        const tryActivate = async () => {\n            await activate(injected, () => {\n                setStatus(pageState.READY);\n            });\n            setStatus(pageState.READY);\n        };\n        mounted && tryActivate();\n\n        return () => {\n            mounted = false;\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    if (status === pageState.READY && !active) {\n        return (\n            <div style={{ alignItems: \"center\", display: \"flex\", gap: 10 }}>\n                <ButtonAction\n                    onClick={() => {\n                        if (!window.ethereum) {\n                            setContentError(\n                                \"Looks like you don't have Metamask, you'll need it to use this app.\"\n                            );\n                            return;\n                        }\n                        activate(injected, (e) => {\n                            if (e instanceof UnsupportedChainIdError) {\n                                setContentError(\n                                    \"Only Rinkeby network is supported.\"\n                                );\n                            }\n                        });\n                    }}\n                >\n                    Connect\n                </ButtonAction>\n                <Text\n                    uppercase\n                    color=\"green\"\n                    t3\n                    lineHeight=\"40px\"\n                    className=\"mx-2\"\n                >\n                    Metamask\n                </Text>\n                <MetamaskLogo />\n            </div>\n        );\n    }\n\n    return (\n        <div style={{ alignItems: \"center\", display: \"flex\", gap: 10 }}>\n            <ButtonAlert onClick={deactivate}>\n                {active ? \"Log Out\" : \"Not Connected\"}\n            </ButtonAlert>\n            <Text uppercase color=\"green\" t3 lineHeight=\"40px\" className=\"mx-4\">\n                {shortenAddress(account)}\n            </Text>\n            <MetamaskLogo />\n        </div>\n    );\n};\n\nexport default MetamaskConnectButton;\n","export const shortenAddress = (address, num = 3) => {\n    if (!address) return \"\";\n    return (\n        !!address &&\n        `${address.substring(0, num + 2)}...${address.substring(\n            address.length - num - 1\n        )}`\n    );\n};\n","import React from \"react\";\nimport Text from \"./styled/Text\";\nimport Card from \"./styled/Card\";\nimport MetamaskConnectButton from \"./MetamaskConnectButton\";\n\nconst Header = () => {\n    return (\n        <>\n            <Card\n                style={{\n                    justifyContent: \"space-between\",\n                    display: \"flex\",\n                    alignItems: \"center\",\n                }}\n            >\n                <Text t3>NFT Login</Text>\n                <div\n                    style={{\n                        display: \"flex\",\n                        flexDirection: \"row\",\n                        gap: 10,\n                    }}\n                >\n                    <MetamaskConnectButton />\n                </div>\n            </Card>\n        </>\n    );\n};\n\nexport default Header;\n","import styled from \"styled-components\";\nimport { colors } from \"../../theme\";\n\nexport const NotificationStyled = styled.div`\n    position: fixed;\n    width: 100%;\n    bottom: 0;\n    z-index: 9999;\n`;\n\nexport const NotificationContent = styled.div`\n    background-color: ${colors.lightBlue};\n    display: flex;\n    flex-direction: row;\n    margin: 20px;\n    justify-content: space-between;\n    align-items: center;\n    border-radius: 10px;\n    padding: 10px;\n`;\n\nexport const GlobalErrorStyled = styled.div`\n    position: fixed;\n    width: 100%;\n    top: 0;\n    z-index: 9999;\n    background-color: ${colors.red};\n    padding: 10px;\n    text-align: center;\n`;\n","import React, { useEffect } from \"react\";\nimport { useAppContext } from \"../AppContext\";\nimport { GlobalErrorStyled } from \"./styled/NotificationStyled\";\nimport Text from \"./styled/Text\";\n\nconst GlobalError = () => {\n    const { contentError, setContentError } = useAppContext();\n\n    useEffect(() => {\n        if (contentError) {\n            setTimeout(() => {\n                setContentError(\"\");\n            }, 5000);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [contentError]);\n\n    if (!contentError) {\n        return null;\n    }\n    return (\n        <GlobalErrorStyled fluid>\n            <Text>{contentError}</Text>\n        </GlobalErrorStyled>\n    );\n};\n\nexport default GlobalError;\n","import React from \"react\";\n\nimport { ethers } from \"ethers\";\nimport { Web3ReactProvider } from \"@web3-react/core\";\nimport { Route } from \"react-router-dom\";\nimport { AppContextProvider } from \"./AppContext\";\nimport Home from \"./pages/Home\";\nimport Header from \"./components/Header\";\nimport GlobalError from \"./components/GlobalError\";\n\nfunction getLibrary(provider) {\n    return new ethers.providers.Web3Provider(provider);\n}\n\nconst App = () => {\n    if (window.ethereum) {\n        window.ethereum.on(\"networkChanged\", () => window.location.reload());\n    }\n\n    return (\n        <AppContextProvider>\n            <Web3ReactProvider getLibrary={getLibrary}>\n                <div\n                    style={{\n                        display: \"flex\",\n                        rowGap: 30,\n                        flexDirection: \"column\",\n                        alignItems: \"center\",\n                        margin: -8,\n                    }}\n                >\n                    <GlobalError />\n                    <Header />\n                    <div\n                        style={{\n                            maxWidth: 900,\n                            width: \"100%\",\n                        }}\n                    >\n                        <Route path=\"/\" component={Home} />\n                    </div>\n                </div>\n            </Web3ReactProvider>\n        </AppContextProvider>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}